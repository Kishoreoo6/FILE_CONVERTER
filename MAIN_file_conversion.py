# -*- coding: utf-8 -*-
"""file conversion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tqE4WLBzHwBQ_0PM7g85y_PnmQeDHFtk

CREATED A FUNCTION NAMED 'CONVERT_TO_JSON' , THIS FUNCTION IS MADE IN SUCH A WAY THAT IT CONVERTS FILES(CSV,XML,XLSX,XLS,TXT) INTO JSON . JSON IS THE STANDARD FILE TYPE MY COMPANY,HENCE USING THIS FUNCTION ALL THE FILES GIVEN TO MY COMPANY WILL BE CONVERTED TO JSON AND THEN PROCESSED.
"""

import pandas as pd
import json
import zipfile
import os
import xml.etree.ElementTree as ET

def convert_to_json(input_file, output_json_file):
    file_extension = os.path.splitext(input_file)[1].lower()

    if file_extension == '.csv':
        data = pd.read_csv(input_file, encoding='utf-8')
    elif file_extension in ('.xlsx', '.xls'):
        data = xlsx_to_json(input_file)
    elif file_extension == '.xml':
        data = xml_to_json(input_file)
    elif file_extension == '.txt':
        data = fixed_width_to_json(input_file)
    else:
        raise ValueError("Unsupported file format")

    serializable_data = convert_data_to_serializable(data)

    with open(output_json_file, 'w') as json_output:
        json.dump(serializable_data, json_output, indent=4)

    return output_json_file

def xlsx_to_json(xlsx_file):
    data = pd.read_excel(xlsx_file)
    data_list = data.to_dict(orient='records')
    return data_list

def xml_to_json(xml_file):
    tree = ET.parse(xml_file)
    root = tree.getroot()
    data = []
    for element in root:
        item = {}
        for child in element:
            item[child.tag] = child.text
        data.append(item)
    return data

def fixed_width_to_json(txt_file):
    with open(txt_file, 'r') as file:
        lines = file.readlines()

    data = []
    for line in lines:
        item = {
            "Field1": line[0:10],
            "Field2": line[10:20],

        }
        data.append(item)

    return data

def convert_data_to_serializable(data):

    if isinstance(data, pd.DataFrame):
        return data.to_dict(orient='records')
    else:
        return data

def datatocompany(input_file):
    if not os.path.isfile(input_file):
        print(f"Input file '{input_file}' does not exist.")
        return

    file_name, file_extension = os.path.splitext(input_file)
    output_json_file = file_name + '.json'

    cvted_file = None

    try:
        cvted_file = convert_to_json(input_file, output_json_file)
        print(f"{input_file} has been converted to JSON and saved as {output_json_file}")
    except Exception as e:
        print(f"Conversion failed: {str(e)}")

    return cvted_file

"""CREATED A FUNCTION NAMED 'json_to_requiredformat()'. THIS FUNCTION CONVERTS THE GIVEN FILE TO THE REQUIRED FORMAT(CSV,XML,XLSX,XLS,TXT).THAT IS THE JSON FILE PROCESSED BY MY COMPANY WILL BE SENT TO THE CUSTOMER COMPANY IN THE FORMAT THEY EXPECT. THE TWO ARUGUMENT SHOULD BE GIVEN TO THE FUNCTION 1.THE FILE , 2.THE FORMAT"""

import json
import csv
import os
import pandas as pd
import xml.etree.ElementTree as ET

def json_to_requiredformat(input_json, output_format):
    def json_to_xml(input_json, output_xml):
        with open(input_json, 'r') as json_file:
            data = json.load(json_file)

        root = ET.Element('Data')
        for entry in data:
            item = ET.SubElement(root, 'Item')
            for key, value in entry.items():
                sub_element = ET.SubElement(item, key)
                sub_element.text = str(value)

        tree = ET.ElementTree(root)
        tree.write(output_xml)

    def json_to_csv(input_json, output_csv):
        with open(input_json, 'r') as json_file:
            data = json.load(json_file)

        with open(output_csv, 'w', newline='') as csv_file:
            writer = csv.DictWriter(csv_file, fieldnames=data[0].keys())
            writer.writeheader()
            writer.writerows(data)

    def json_to_xlsx(input_json, output_xlsx):
        with open(input_json, 'r') as json_file:
            data = json.load(json_file)

        df = pd.DataFrame(data)
        df.to_excel(output_xlsx, index=False)

    def json_to_text(input_json, output_text):
        with open(input_json, 'r') as json_file:
            data = json.load(json_file)

        with open(output_text, 'w') as text_file:
            for entry in data:
                text_file.write(json.dumps(entry) + '\n')

    if output_format == 'xml':
        output_file = 'outputdata.xml'
        json_to_xml(input_json, output_file)
    elif output_format == 'csv':
        output_file = 'outputdata.csv'
        json_to_csv(input_json, output_file)
    elif output_format == 'xlsx':
        output_file = 'outputdata.xlsx'
        json_to_xlsx(input_json, output_file)
    elif output_format == 'text':
        output_file = 'outputdata.txt'
        json_to_text(input_json, output_file)
    else:
        print("Unsupported output format.")

    print(f"{input_json} has been converted to {output_format} and saved as {output_file}.")

"""USED THE CREATED FUNCTIONS"""

input_file = '/content/HR_Employee_Data.xlsx'
cvted_file = datatocompany(input_file)
if cvted_file is not None:
    print(f"Converted JSON file saved as: {cvted_file}")

"""the obtained fie is converted to json and info and manupulation is of the data is done"""

import pandas as pd
raw_data_file = cvted_file
data = pd.read_json(raw_data_file)
data = data.dropna()

data.drop_duplicates(inplace=True)

print("Count of missing values after processing:")
print(data.isnull().sum())

#processed_data_file = 'processed_data.csv'
#data.to_csv(processed_data_file, index=False)
processed_data_xml = 'processed_data.xml'
data.to_xml(processed_data_xml, index=False, root_name='Data', row_name='Item')

print(f"The raw data has been processed and saved as {processed_data_file} (CSV) and {processed_data_xml} (XML).")

json_to_requiredformat(cvted_file, 'xlsx')



df = pd.DataFrame(data)

# Convert DataFrame to JSON with all values as strings
df_str = df.astype(str)

# Specify the file path
json_file_path = 'worked_file.json'

# Save DataFrame with all values as strings to JSON file
df_str.to_json(json_file_path, orient='records', lines=True)

print(f"JSON file saved as: {json_file_path}")
with open(json_file_path, 'r') as json_file:
    json_data = json.load(json_file)

# Print the variable containing the JSON data
print("Data stored in the 'json_data' variable:")
print(json_data)
print("Type of the variable: ", type(json_data))

"""AFTER RUNNING THE ABOVE CELL U WILL GET A JSON FILE AS OUTPUT
THAT FILE SHOULD BE THE INPUT FOR THE BELOW CELL
"""





import pandas as pd
import json
import zipfile
import os
import xml.etree.ElementTree as ET

def convert_to_json(input_file, output_json_file):
    file_extension = os.path.splitext(input_file)[1].lower()

    if file_extension == '.csv':
        data = pd.read_csv(input_file, encoding='utf-8')
    elif file_extension in ('.xlsx', '.xls'):
        data = xlsx_to_json(input_file)
    elif file_extension == '.xml':
        data = xml_to_json(input_file)
    elif file_extension == '.txt':
        data = fixed_width_to_json(input_file)
    else:
        raise ValueError("Unsupported file format")

    # Convert the data to a format that is JSON-serializable
    serializable_data = convert_data_to_serializable(data)

    with open(output_json_file, 'w') as json_output:
        json.dump(serializable_data, json_output, indent=4)

    return output_json_file  # Return the path to the converted JSON file

def xlsx_to_json(xlsx_file):
    data = pd.read_excel(xlsx_file)
    data_list = data.to_dict(orient='records')
    return data_list

def xml_to_json(xml_file):
    tree = ET.parse(xml_file)
    root = tree.getroot()
    data = []
    for element in root:
        item = {}
        for child in element:
            item[child.tag] = child.text
        data.append(item)
    return data

def fixed_width_to_json(txt_file):
    with open(txt_file, 'r') as file:
        lines = file.readlines()

    data = []
    for line in lines:
        item = {
            "Field1": line[0:10],
            "Field2": line[10:20],
            # Define fields and positions as needed
        }
        data.append(item)

    return data

def convert_data_to_serializable(data):
    # Convert Pandas DataFrame to a format that is JSON-serializable
    if isinstance(data, pd.DataFrame):
        return data.to_dict(orient='records')
    else:
        return data

def datatocompany(input_file):
    if not os.path.isfile(input_file):
        print(f"Input file '{input_file}' does not exist.")
        return

    file_name, file_extension = os.path.splitext(input_file)
    output_json_file = file_name + '.json'

    cvted_file = None  # Declare cvt_file locally

    try:
        cvted_file = convert_to_json(input_file, output_json_file)  # Assign the converted JSON file to cvt_file
        print(f"{input_file} has been converted to JSON and saved as {output_json_file}")
    except Exception as e:
        print(f"Conversion failed: {str(e)}")

    return cvted_file  # Return the path to the converted JSON file
#2




import json
import csv
import os
import pandas as pd
import xml.etree.ElementTree as ET

def json_to_requiredformat(input_json, output_format):
    def json_to_xml(input_json, output_xml):
        with open(input_json, 'r') as json_file:
            data = json.load(json_file)

        root = ET.Element('Data')
        for entry in data:
            item = ET.SubElement(root, 'Item')
            for key, value in entry.items():
                sub_element = ET.SubElement(item, key)
                sub_element.text = str(value)

        tree = ET.ElementTree(root)
        tree.write(output_xml)

    def json_to_csv(input_json, output_csv):
        with open(input_json, 'r') as json_file:
            data = json.load(json_file)

        with open(output_csv, 'w', newline='') as csv_file:
            writer = csv.DictWriter(csv_file, fieldnames=data[0].keys())
            writer.writeheader()
            writer.writerows(data)

    def json_to_xlsx(input_json, output_xlsx):
        with open(input_json, 'r') as json_file:
            data = json.load(json_file)

        df = pd.DataFrame(data)
        df.to_excel(output_xlsx, index=False)

    def json_to_text(input_json, output_text):
        with open(input_json, 'r') as json_file:
            data = json.load(json_file)

        with open(output_text, 'w') as text_file:
            for entry in data:
                text_file.write(json.dumps(entry) + '\n')

    if output_format == 'xml':
        output_file = 'outputdata.xml'
        json_to_xml(input_json, output_file)
    elif output_format == 'csv':
        output_file = 'outputdata.csv'
        json_to_csv(input_json, output_file)
    elif output_format == 'xlsx':
        output_file = 'outputdata.xlsx'
        json_to_xlsx(input_json, output_file)
    elif output_format == 'text':
        output_file = 'outputdata.txt'
        json_to_text(input_json, output_file)
    else:
        print("Unsupported output format.")

    print(f"{input_json} has been converted to {output_format} and saved as {output_file}.")


#3

input_file = '/content/employees.csv'
cvted_file = datatocompany(input_file)
if cvted_file is not None:
    print(f"Converted JSON file saved as: {cvted_file}")

#4
import pandas as pd
data=pd.read_json(cvted_file)

num_of_null=data.isnull().sum()
head=data.head()

print("***************the gist of the data file***************")
print(" ")
print(head)
print(" ")
print("***************details of null values in the data file*************")
print(" ")
print(num_of_null)
print(" ")
print("*************short info the file*************")
print(" ")
print(data.info())

#5
json_to_requiredformat(cvted_file, 'xlsx')





input_file = "/content/HR_Employee_Data.xlsx"


cvted_file = datatocompany(input_file)
if cvted_file is not None:
    print(f"Converted JSON file saved as: {cvted_file}")

#4
import pandas as pd
data=pd.read_json(cvted_file)

num_of_null=data.isnull().sum()
head=data.head()

print("***************the gist of the data file***************")
print(" ")
print(head)
print(" ")
print("***************details of null values in the data file*************")
print(" ")
print(num_of_null)
print(" ")
print("*************short info the file*************")
print(" ")
print(data.info())

#5
typee=input("enter the required file type,'xlm' or 'csv' or 'xlsx' or 'txt")
json_to_requiredformat(cvted_file, typee)

print("j")





"""with pyteserract img to txt feature

"""

!apt-get install -y tesseract-ocr
!pip install pytesseract

import pandas as pd
import json
import zipfile
import os
import xml.etree.ElementTree as ET
import cv2
import pytesseract
import csv

# Sub-division 1: Data Conversion Functions

def convert_to_json(input_file, output_json_file):
    file_extension = os.path.splitext(input_file)[1].lower()

    if file_extension == '.csv':
        data = pd.read_csv(input_file, encoding='utf-8')
    elif file_extension in ('.xlsx', '.xls'):
        data = xlsx_to_json(input_file)
    elif file_extension == '.xml':
        data = xml_to_json(input_file)
    elif file_extension == '.txt':
        data = fixed_width_to_json(input_file)
    else:
        raise ValueError("Unsupported file format")

    serializable_data = convert_data_to_serializable(data)

    with open(output_json_file, 'w') as json_output:
        json.dump(serializable_data, json_output, indent=4)

    return output_json_file

def xlsx_to_json(xlsx_file):
    data = pd.read_excel(xlsx_file)
    data_list = data.to_dict(orient='records')
    return data_list

def xml_to_json(xml_file):
    tree = ET.parse(xml_file)
    root = tree.getroot()
    data = []
    for element in root:
        item = {}
        for child in element:
            item[child.tag] = child.text
        data.append(item)
    return data

def fixed_width_to_json(txt_file):
    with open(txt_file, 'r') as file:
        lines = file.readlines()

    data = []
    for line in lines:
        item = {
            "Field1": line[0:10],
            "Field2": line[10:20],
            # Define fields and positions as needed
        }
        data.append(item)

    return data

def convert_data_to_serializable(data):
    if isinstance(data, pd.DataFrame):
        return data.to_dict(orient='records')
    else:
        return data

def datatocompany(input_file):
    if not os.path.isfile(input_file):
        print(f"Input file '{input_file}' does not exist.")
        return

    file_name, file_extension = os.path.splitext(input_file)
    output_json_file = file_name + '.json'

    cvted_file = None

    try:
        cvted_file = convert_to_json(input_file, output_json_file)
        print(f"{input_file} has been converted to JSON and saved as {output_json_file}")
    except Exception as e:
        print(f"Conversion failed: {str(e)}")

    return cvted_file

# Sub-division 3: Image Text Extraction

def extract_text_from_image(image_path):
    img = cv2.imread(image_path)
    text = pytesseract.image_to_string(img)
    output_file_path = "extracted_text.txt"
    with open(output_file_path, "w") as f:
        f.write(text)
    return output_file_path

# Sub-division 2: JSON Conversion Functions

def json_to_requiredformat(input_json, output_format):
    def json_to_xml(input_json, output_xml):
        with open(input_json, 'r') as json_file:
            data = json.load(json_file)

        root = ET.Element('Data')
        for entry in data:
            item = ET.SubElement(root, 'Item')
            for key, value in entry.items():
                sub_element = ET.SubElement(item, key)
                sub_element.text = str(value)

        tree = ET.ElementTree(root)
        tree.write(output_xml)

    def json_to_csv(input_json, output_csv):
        with open(input_json, 'r') as json_file:
            data = json.load(json_file)

        with open(output_csv, 'w', newline='') as csv_file:
            writer = csv.DictWriter(csv_file, fieldnames=data[0].keys())
            writer.writeheader()
            writer.writerows(data)

    def json_to_xlsx(input_json, output_xlsx):
        with open(input_json, 'r') as json_file:
            data = json.load(json_file)

        df = pd.DataFrame(data)
        df.to_excel(output_xlsx, index=False)

    def json_to_text(input_json, output_text):
        with open(input_json, 'r') as json_file:
            data = json.load(json_file)

        with open(output_text, 'w') as text_file:
            for entry in data:
                text_file.write(json.dumps(entry) + '\n')

    if output_format == 'xml':
        output_file = 'outputdata.xml'
        json_to_xml(input_json, output_file)
    elif output_format == 'csv':
        output_file = 'outputdata.csv'
        json_to_csv(input_json, output_file)
    elif output_format == 'xlsx':
        output_file = 'outputdata.xlsx'
        json_to_xlsx(input_json, output_file)
    elif output_format == 'text':
        output_file = 'outputdata.txt'
        json_to_text(input_json, output_file)
    else:
        print("Unsupported output format.")

    print(f"{input_json} has been converted to {output_format} and saved as {output_file}.")